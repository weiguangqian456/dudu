package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weiwei.salemall.bean.ShoppingItemsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOPPING_ITEMS_BEAN".
*/
public class ShoppingItemsBeanDao extends AbstractDao<ShoppingItemsBean, Integer> {

    public static final String TABLENAME = "SHOPPING_ITEMS_BEAN";

    /**
     * Properties of entity ShoppingItemsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, int.class, "userId", true, "USER_ID");
        public final static Property Ischeck = new Property(1, boolean.class, "ischeck", false, "ISCHECK");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Num = new Property(4, int.class, "num", false, "NUM");
        public final static Property MallPrice = new Property(5, String.class, "mallPrice", false, "MALL_PRICE");
        public final static Property JdPrice = new Property(6, String.class, "jdPrice", false, "JD_PRICE");
        public final static Property Desc = new Property(7, String.class, "desc", false, "DESC");
        public final static Property Property = new Property(8, String.class, "property", false, "PROPERTY");
        public final static Property ProductNo = new Property(9, String.class, "productNo", false, "PRODUCT_NO");
    }


    public ShoppingItemsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShoppingItemsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOPPING_ITEMS_BEAN\" (" + //
                "\"USER_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"ISCHECK\" INTEGER NOT NULL ," + // 1: ischeck
                "\"IMAGE\" TEXT," + // 2: image
                "\"NAME\" TEXT," + // 3: name
                "\"NUM\" INTEGER NOT NULL ," + // 4: num
                "\"MALL_PRICE\" TEXT," + // 5: mallPrice
                "\"JD_PRICE\" TEXT," + // 6: jdPrice
                "\"DESC\" TEXT," + // 7: desc
                "\"PROPERTY\" TEXT," + // 8: property
                "\"PRODUCT_NO\" TEXT);"); // 9: productNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOPPING_ITEMS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShoppingItemsBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
        stmt.bindLong(2, entity.getIscheck() ? 1L: 0L);
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getNum());
 
        String mallPrice = entity.getMallPrice();
        if (mallPrice != null) {
            stmt.bindString(6, mallPrice);
        }
 
        String jdPrice = entity.getJdPrice();
        if (jdPrice != null) {
            stmt.bindString(7, jdPrice);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(8, desc);
        }
 
        String property = entity.getProperty();
        if (property != null) {
            stmt.bindString(9, property);
        }
 
        String productNo = entity.getProductNo();
        if (productNo != null) {
            stmt.bindString(10, productNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShoppingItemsBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
        stmt.bindLong(2, entity.getIscheck() ? 1L: 0L);
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getNum());
 
        String mallPrice = entity.getMallPrice();
        if (mallPrice != null) {
            stmt.bindString(6, mallPrice);
        }
 
        String jdPrice = entity.getJdPrice();
        if (jdPrice != null) {
            stmt.bindString(7, jdPrice);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(8, desc);
        }
 
        String property = entity.getProperty();
        if (property != null) {
            stmt.bindString(9, property);
        }
 
        String productNo = entity.getProductNo();
        if (productNo != null) {
            stmt.bindString(10, productNo);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public ShoppingItemsBean readEntity(Cursor cursor, int offset) {
        ShoppingItemsBean entity = new ShoppingItemsBean( //
            cursor.getInt(offset + 0), // userId
            cursor.getShort(offset + 1) != 0, // ischeck
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mallPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // jdPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // desc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // property
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // productNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShoppingItemsBean entity, int offset) {
        entity.setUserId(cursor.getInt(offset + 0));
        entity.setIscheck(cursor.getShort(offset + 1) != 0);
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum(cursor.getInt(offset + 4));
        entity.setMallPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJdPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDesc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProperty(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProductNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ShoppingItemsBean entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public Integer getKey(ShoppingItemsBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShoppingItemsBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
